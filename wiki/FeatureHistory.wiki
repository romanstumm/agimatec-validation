#summary Features and revision history

== THERE ARE NO FURTHER DEVELOPMENT PLANS FOR AGIMATEC-VALIDATION, BECAUSE AGIMATEC-VALIDATION HAS BECOME APACHE-BVAL. ==

  * current sources are hosted as apache-bval on https://svn.apache.org/repos/asf/bval/trunk
  * Apache BVal: http://bval.apache.org
  * Artifacts: https://repository.apache.org/content/groups/public/org/apache/bval/
  * Wiki: http://cwiki.apache.org/BeanValidation/
  * Bug Tracking: https://issues.apache.org/jira/browse/BVAL 

= News =
  * 28th may 2010:
  download 0.9.7-SNAPSHOT.zip that contains patches and minor changes

  Issue#26 method validation parameter processing problems - FIXED

  * 17th march 2010: 
    agimatec-validation sources are now [http://svn.apache.org/repos/asf/incubator/bval/ hosted as apache incubator project]. Get the sources with:

{{{svn checkout http://svn.apache.org/repos/asf/incubator/bval/trunk bval}}}

  * Apache BVAL (Incubator) Status Page: http://incubator.apache.org/projects/beanvalidation.html

  * [http://wiki.apache.org/incubator/ValidationProposal Proposal for agimatec-validation to become an Apache Incubator project]

= Latest changes =
The sources in svn are probably newer than the release you find in the "Downloads" section. Refer to BuildAgimatecValidation to create a jar from the sources.

= History =

=== release 0.9.6 (25th Febr. 2010) ===
  * bug fixes: Issue#22, Issue#21 and others
  * method-level validation (annotation-based, experimental, no XML-deployment descriptor yet)

===release 0.9.5 (11th December 2009)===
*FEATURE-COMPLETE IMPLEMENTATION OF JSR303*
  * performance improvements
  * jsr303 bootstrap API completed
  * Issue#14: JSR303 XML deployment descriptor and constraints supported
  * Issue#20: fixed NullPointerException in hasConstraints()
  * fixes in agimatec-validation core (proprietary validation of maxValue/minValue)

===release 0.9.4 (October, November 2009)===
  * compiled with validation-api 1.0.0.GA
  * Issue#17: Validation of Maps, Sets implemented
  * Annotation.payload implemented
  * Issue#19: redefined default Group with @GroupSequence implemented
  * Issue#16: support for @OverridesAttribute implemented
  * ConstraintFinder support implemented
  * various improvements and fixes required by the spec, see Issues
  * ConstraintDefinitionException when payload, groups or message parameter is missing on annotations annotated with @Constraint
  * Issue#18: type-safety check when call a constraint-validator implementation's isValid() method (chapter 3.5.3. ConstraintValidator resolution algorithm)
  * new feature: BeanValidator.treatMapsLikeBeans 
  * started work on: method-level validation

===1st Oct 2009===
  * released jars, version 0.9.3, compilable to validation-api 1.0.CR5
  * ValidatorContext: ValidatorFactory.usingContext()
  * TraversableResolver
  * Path, Node  
  * Object graph validation: Array, Collection, Set, Map (value) validation supported (any object implementing Iterable)

===20.07.2009===
version 0.9.1-SNAPSHOT - r239
  * artifacts published to http://oss.sonatype.org/content/repositories/agimatec-snapshots/com/agimatec/
  * compatible with validation-api-1.0.CR1.jar
  * constraints {{{@DecimalMin}}} and {{{@DecimalMax}}} now available

===01.07.2009===
version 0.9.1-SNAPSHOT - r212
  * compatible with validation-api-1.0.Beta4.jar

===09.04.2009===
version 0.9.0-snapshot - r211
  * compatible with latest version of validation-api.jar (beta4-snapshot)
  * support group sequences and group inheritance

===19.02.2009===
version 0.7.3-snapshot
  * SVN URL of validation api classes has moved to 
    http://anonsvn.jboss.org/repos/hibernate/beanvalidation/trunk/validation-api
  * agimatec-validation made compatible with current state of JSR303 validation-api


===03.02.2009===
  * renamed bootstrap classes of validation-api.jar supported
  * Default-!BuildInConstraint Configuration for standard Annotations (!NotNull, Null, Max, Size...) implemented. Thus javax.validation.constraint annotations will also be validated automatically.

===November 2008===
The reference implementation and JSR303 specification is rapidly changing at the moment.
Check out the svn-sources to get the code compatible with the current state of the validation-api.*

===V0.7.3 (snapshot): (Jan 2009)===
  * compatible with validation-api (snapshot 4tn feb. 2009), many classes have been renamed
  * validates all javax.validation.constraints that currently exist in the validation-api
   (see resource defaultConstraints.properties in agimatec-validation.jar)
  * not-yet-implemented: !OverridesParameter, !TraversableResolver, !ValidatorContext, group inheritance, type-safety check calling !ConstraintValidator 

===V0.7.1 (snapshot): (Nov. 2008)===
  * compatible with validation-api.jar (snapshot 24th november 2008)
   - the interfaces and classes of the specificiation changed their names quite often since release 0.7-SNAPSHOT
  * using javax.validation/validation-api from reference implementation
  * implementing proposed bootstrap APIs
  * dropped support for proprietary bootstrap classes 
  * implementing current functionality from jsr303-spec draft
  * package redesign
  * javax.validation.!ConstraintContext support implemented
  * composed constraints implemented (currently without !OverridesParameter!)
  * support for nested properties (needs improvement!)

===V0.6.1===
  * Implemented issue-6: Provide a bootstrap method for Validator with specific Locale
  * Implemented issue-7: Provide annotation @Email
  * Implemented issue-8: Maven surefire 2.4.2 version in pom.xml

===V0.5===
  * support for resolution of association types during runtime. (required by JSR303)
    consequences: relationship targets can have different types, generics on collection types not required anymore
  * !ValidationContext and !GroupValidationContext are interfaces
  * new testcase !ValidationTest.testValidAnnotation() tests nested, polimorphic relationships  
===V0.4===
  * implementation of [http://jcp.org/aboutJava/communityprocess/edr/jsr303/ JSR 303: bean-validation]
  * Define constraints with predefined annotations
  * Create own validators and annotations to define custom constraints
  * Use annotations on business objects (POJOs, value-object classes)
  * Flexible meta data model can be used for various purposes (see class !MetaBean)
  * Decorate classes and define validators with XML on multiple layers of your application
  * Support for dynamic creation of !MetaBeans (e.g. role-specific validation rules for different users, administration/change of meta data during runtime)
  * A class can have more than one definition of validations (multiple !MetaBeans per class identified by IDs)
  * Load the XML descriptors from any resource (classpath, URL/webservice, database), create own loaders (see interface XMLMetaBeanLoader and XMLMetaBeanRegistry)
  * Generate JSON code (based on a freemarker template) from the meta data (e.g. use meta data in AJAX GUIs to support validation or create a generic GUI for your beans - this framework provides the basis for such solutions) 
  * parameter validation: validation of method-calls (e.g. tested with XFire, call the class !ThreadBeanValidator from within a custom org.codehaus.xfire.service.invoker.Invoker)