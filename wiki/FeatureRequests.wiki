#summary TO DOs and missing features

= not-yet-implemented features for JSR 303 support = 
 * ~~@OverridesAttributes~~ OK
 * ~~TraversableResolver~~  OK
 * Method-level validation (currently not implemented in JSR303, exists as proposal only) - STARTED
 * ~~JSR-303 XML mappings (xml deployment descriptor)~~ OK
 * improve integration between JSR303 annotations and agimatec-metadata validations. 
 * ~~type-safety check when call a constraint-validator implementation's isValid() method~~ OK
 * ~~ConstraintViolation.getMessageTemplate() and getMessage()~~ OK
 * ~~ValidatorFactory.usingContext()~~ OK
 * ~~Object graph validation: Set, Map (value) validation not yet supported (currently only Array and Collection are supported, spec: _Any object implementing java.lang.Iterable must be supported._)~~ OK

== Exceptions to support properly ==
 * UnexpectedTypeException – invalid property type 
   * (spec: _Applying a constraint annotation to an incompatible type will raise an UnexpectedTypeException._)
   * verifyResolveWasUnique: No validator could be found for type
   * verifyResolveWasUnique: There are multiple validators which could validate...
 * ConstraintDefinitionException – illegal constraint
   * OverrideAttributes: overriding type of a composite constraint must be identical to the overridden one.
   * OverrideAttributes: Overridden constraint does not define an attribute with name...
   * ~~assertPayloadParameterExists~~ OK
   * ~~assertGroupsParameterExists~~ OK
   * ~~assertMessageParameterExists~~ OK
   * restrictions to check, assertNoParameterStartsWithValid (spec: _The annotation element names message, groups and payload are considered reserved names; annotation elements starting with valid are not all._)
 * ConstraintDeclarationException – invalid constraint argument
 * ~~GroupDefinitionException – cyclic graph, illegal override~~ OK

== Tests to implement ==
  * spec: _2.2. Applying multiple constraints of the same type_
  * javax.validation.constraints.[plural forms] 
  * 

= Other TO DOs =
  * Improve interaction between annotation based validation (jsr 303) and non-annotation based validations (agimatec)
  * More tests (ongoing)
  * Tutorial / real-world example
  * ~~Clarify access to overwritten getter-methods (private/protected/public)~~ OK, tested

= Additional features =
  * proprietary agimatec-validation-XML 