#summary Wiki Overview: agimatec-validation framework

= Introduction =

The Wiki of "agimatec-validation" is open for community contribution. Useful information will be eventually incorporated into other parts of this site. Please be careful not to overwrite content from other people! 

== 29.10.2008: Reference implementation and bootstrap proposal are out ==
  * see http://forum.hibernate.org/viewtopic.php?t=991154 
The agimatec-validation framework supports them (check out source from SVN), but
there is more work to be done...
  * The upcoming version 0.7 will not contain the javax.validation classes anymore but  instead use them from the official reference implementation.
  * The upcoming version 0.7 will implement the bootstrap API and thus will not support ValidationProvider and ValidationProviderFactory anymore
  * The version 0.7 will have packages renamed from com.agimatec.utility.validation to com.agimatec.validation


= Supported features =

V0.6.1:
  * Implemented issue-6: Provide a bootstrap method for Validator with specific Locale
  * Implemented issue-7: Provide annotation @Email
  * Implemented issue-8: Maven surefire 2.4.2 version in pom.xml

V0.5:
  * support for resolution of association types during runtime. (required by JSR303)
    consequences: relationship targets can have different types, generics on collection types not required anymore
  * ValidationContext and GroupValidationContext are interfaces
  * new testcase ValidationTest.testValidAnnotation() tests nested, polimorphic relationships  
V0.4:
  * implementation of [http://jcp.org/aboutJava/communityprocess/edr/jsr303/ JSR 303: bean-validation]
  * Define constraints with predefined annotations
  * Create own validators and annotations to define custom constraints
  * Use annotations on business objects (POJOs, value-object classes)
  * Flexible meta data model can be used for various purposes (see class !MetaBean)
  * Decorate classes and define validators with XML on multiple layers of your application
  * Support for dynamic creation of !MetaBeans (e.g. role-specific validation rules for different users, administration/change of meta data during runtime)
  * A class can have more than one definition of validations (multiple !MetaBeans per class identified by IDs)
  * Load the XML descriptors from any resource (classpath, URL/webservice, database), create own loaders (see interface XMLMetaBeanLoader and XMLMetaBeanRegistry)
  * Generate JSON code (based on a freemarker template) from the meta data (e.g. use meta data in AJAX GUIs to support validation or create a generic GUI for your beans - this framework provides the basis for such solutions) 
  * parameter validation: validation of method-calls (e.g. tested with XFire, call the class !ThreadBeanValidator from within a custom org.codehaus.xfire.service.invoker.Invoker)

= Project status =
[ProjectStatus project status]

== Feature requests ==
[FeatureRequests feature requests]

= Getting started =
[GettingStarted getting started]

= Building the project with Maven2 =
[BuildAgimatecValidation How to build agimatec-validation]

= More =
You need to know more? Ask for more documentation. Tell us what you want to know, we document it here.

We want to know your option and are curious to know your use cases for the validation framework (many different are possible, e.g. validation in an EJB container, validation for a Swing app, webapp or AJAX app. Code generation, GUI generation, scaffolding, etc.)
Write us! We appreciate your comments.